{
  "block/ADC_COMMON": {
    "description": "Analog-to-Digital Converter.",
    "items": [
      {
        "name": "CSR",
        "description": "ADC common status register.",
        "byte_offset": 0,
        "access": "Read",
        "fieldset": "CSR"
      },
      {
        "name": "CCR",
        "description": "ADC_CCR system control register.",
        "byte_offset": 8,
        "fieldset": "CCR"
      },
      {
        "name": "CDR",
        "description": "ADC common regular data register for dual mode.",
        "byte_offset": 12,
        "access": "Read",
        "fieldset": "CDR"
      },
      {
        "name": "CDR2",
        "description": "ADC common regular data register for 32-bit dual mode.",
        "byte_offset": 16,
        "access": "Read",
        "fieldset": "CDR2"
      }
    ]
  },
  "fieldset/CCR": {
    "description": "ADC_CCR system control register.",
    "fields": [
      {
        "name": "DUAL",
        "description": "Dual ADC mode selection These bits are written by software to select the operating mode. All the ADCs are independent: The configurations 00001 to 01001 correspond to the following operating modes: Dual mode, master and slave ADCs working together: All other combinations are reserved and must not be programmed Note: The software is allowed to write these bits only when the ADCs are disabled (ADCAL = 0, JADSTART = 0, ADSTART = 0, ADSTP = 0, ADDIS = 0 and ADEN = 0).",
        "bit_offset": 0,
        "bit_size": 5,
        "enum": "DUAL"
      },
      {
        "name": "DELAY",
        "description": "Delay between the end of the master ADC sampling phase and the beginning of the slave ADC sampling phase. These bits are set and cleared by software. These bits are used in dual interleaved modes. Refer to for the value of ADC resolution versus DELAY bits values. Note: The software is allowed to write these bits only when the ADCs are disabled (ADCAL = 0, JADSTART = 0, ADSTART = 0, ADSTP = 0, ADDIS = 0 and ADEN = 0).",
        "bit_offset": 8,
        "bit_size": 4
      },
      {
        "name": "DAMDF",
        "description": "Dual ADC Mode Data Format This bit-field is set and cleared by software. It specifies the data format in the common data register CDR. Note: The software is allowed to write these bits only when ADSTART = 0 (which ensures that no regular conversion is ongoing).",
        "bit_offset": 14,
        "bit_size": 2,
        "enum": "DAMDF"
      },
      {
        "name": "PRESC",
        "description": "ADC prescaler These bits are set and cleared by software to select the frequency of the ADC clock. The clock is common to all ADCs. Others: Reserved, must not be used Note: The software is allowed to write this bit only when the ADCs are disabled (ADCAL = 0, JADSTART = 0, ADSTART = 0, ADSTP = 0, ADDIS = 0 and ADEN = 0).",
        "bit_offset": 18,
        "bit_size": 4,
        "enum": "PRESC"
      },
      {
        "name": "VREFEN",
        "description": "VREFINT enable This bit is set and cleared by software to enable/disable the VREFINT buffer. Note: The software is allowed to write this bit only when the ADCs are disabled (ADCAL = 0, JADSTART = 0, ADSTART = 0, ADSTP = 0, ADDIS = 0 and ADEN = 0).",
        "bit_offset": 22,
        "bit_size": 1
      },
      {
        "name": "VSENSEEN",
        "description": "Temperature sensor voltage selection This bit is set and cleared by software to control the temperature sensor channel. Note: The software is allowed to write this bit only when the ADCs are disabled (ADCAL = 0, JADSTART = 0, ADSTART = 0, ADSTP = 0, ADDIS = 0 and ADEN = 0).",
        "bit_offset": 23,
        "bit_size": 1
      },
      {
        "name": "VBATEN",
        "description": "VBAT enable This bit is set and cleared by software to control the VBAT channel. Note: The software is allowed to write this bit only when the ADCs are disabled (ADCAL = 0, JADSTART = 0, ADSTART = 0, ADSTP = 0, ADDIS = 0 and ADEN = 0).",
        "bit_offset": 24,
        "bit_size": 1
      }
    ]
  },
  "fieldset/CDR": {
    "description": "ADC common regular data register for dual mode.",
    "fields": [
      {
        "name": "RDATA_MST",
        "description": "Regular data of the master ADC. In dual mode, these bits contain the regular data of the master ADC. Refer to . The data alignment is applied as described in offset (ADC_DR, ADC_JDRy, OFFSETy, OFFSETy_CH, OVSS, LSHIFT, USAT, SSAT)) In DAMDF[1:0] = 11 mode, bits 15:8 contains SLV_ADC_DR[7:0], bits 7:0 contains MST_ADC_DR[7:0].",
        "bit_offset": 0,
        "bit_size": 16
      },
      {
        "name": "RDATA_SLV",
        "description": "Regular data of the slave ADC In dual mode, these bits contain the regular data of the slave ADC. Refer to Dual ADC modes. The data alignment is applied as described in offset (ADC_DR, ADC_JDRy, OFFSETy, OFFSETy_CH, OVSS, LSHIFT, USAT, SSAT)).",
        "bit_offset": 16,
        "bit_size": 16
      }
    ]
  },
  "fieldset/CDR2": {
    "description": "ADC common regular data register for 32-bit dual mode.",
    "fields": [
      {
        "name": "RDATA_ALT",
        "description": "Regular data of the master/slave alternated ADCs In dual mode, these bits alternatively contains the regular 32-bit data of the master and the slave ADC. Refer to . The data alignment is applied as described in (ADC_DR, ADC_JDRy, OFFSETy, OFFSETy_CH, OVSS, LSHIFT, USAT, SSAT).",
        "bit_offset": 0,
        "bit_size": 32
      }
    ]
  },
  "fieldset/CSR": {
    "description": "ADC common status register.",
    "fields": [
      {
        "name": "ADRDY_MST",
        "description": "Master ADC ready This bit is a copy of the ADRDY bit in the corresponding ADC_ISR register.",
        "bit_offset": 0,
        "bit_size": 1
      },
      {
        "name": "EOSMP_MST",
        "description": "End of Sampling phase flag of the master ADC This bit is a copy of the EOSMP bit in the corresponding ADC_ISR register.",
        "bit_offset": 1,
        "bit_size": 1
      },
      {
        "name": "EOC_MST",
        "description": "End of regular conversion of the master ADC This bit is a copy of the EOC bit in the corresponding ADC_ISR register.",
        "bit_offset": 2,
        "bit_size": 1
      },
      {
        "name": "EOS_MST",
        "description": "End of regular sequence flag of the master ADC This bit is a copy of the EOS bit in the corresponding ADC_ISR register.",
        "bit_offset": 3,
        "bit_size": 1
      },
      {
        "name": "OVR_MST",
        "description": "Overrun flag of the master ADC This bit is a copy of the OVR bit in the corresponding ADC_ISR register.",
        "bit_offset": 4,
        "bit_size": 1
      },
      {
        "name": "JEOC_MST",
        "description": "End of injected conversion flag of the master ADC This bit is a copy of the JEOC bit in the corresponding ADC_ISR register.",
        "bit_offset": 5,
        "bit_size": 1
      },
      {
        "name": "JEOS_MST",
        "description": "End of injected sequence flag of the master ADC This bit is a copy of the JEOS bit in the corresponding ADC_ISR register.",
        "bit_offset": 6,
        "bit_size": 1
      },
      {
        "name": "AWD_MST",
        "description": "Analog watchdog flags of the master ADC This bit is a copy of the AWD1 bit in the corresponding ADC_ISR register.",
        "bit_offset": 7,
        "bit_size": 1,
        "array": {
          "len": 3,
          "stride": 1
        }
      },
      {
        "name": "LDORDY_MST",
        "description": "ADC voltage regulator ready flag of the master ADC This bit is a copy of the LDORDY bit of the corresponding ADC_ISR register.",
        "bit_offset": 12,
        "bit_size": 1
      },
      {
        "name": "ADRDY_SLV",
        "description": "Slave ADC ready This bit is a copy of the ADRDY bit in the corresponding ADCx+1_ISR register.",
        "bit_offset": 16,
        "bit_size": 1
      },
      {
        "name": "EOSMP_SLV",
        "description": "End of Sampling phase flag of the slave ADC This bit is a copy of the EOSMP2 bit in the corresponding ADCx+1_ISR register.",
        "bit_offset": 17,
        "bit_size": 1
      },
      {
        "name": "EOC_SLV",
        "description": "End of regular conversion of the slave ADC This bit is a copy of the EOC bit in the corresponding ADCx+1_ISR register.",
        "bit_offset": 18,
        "bit_size": 1
      },
      {
        "name": "EOS_SLV",
        "description": "End of regular sequence flag of the slave ADC This bit is a copy of the EOS bit in the corresponding ADCx+1_ISR register.",
        "bit_offset": 19,
        "bit_size": 1
      },
      {
        "name": "OVR_SLV",
        "description": "Overrun flag of the slave ADC This bit is a copy of the OVR bit in the corresponding ADCx+1_ISR register.",
        "bit_offset": 20,
        "bit_size": 1
      },
      {
        "name": "JEOC_SLV",
        "description": "End of injected conversion flag of the slave ADC This bit is a copy of the JEOC bit in the corresponding ADCx+1_ISR register.",
        "bit_offset": 21,
        "bit_size": 1
      },
      {
        "name": "JEOS_SLV",
        "description": "End of injected sequence flag of the slave ADC This bit is a copy of the JEOS bit in the corresponding ADCx+1_ISR register.",
        "bit_offset": 22,
        "bit_size": 1
      },
      {
        "name": "AWD1_SLV",
        "description": "Analog watchdog 1 flag of the slave ADC This bit is a copy of the AWD1 bit in the corresponding ADCx+1_ISR register.",
        "bit_offset": 23,
        "bit_size": 1,
        "array": {
          "len": 3,
          "stride": 1
        }
      },
      {
        "name": "LDORDY_SLV",
        "description": "ADC voltage regulator ready flag of the slave ADC This bit is a copy of the LDORDY bit of the corresponding ADCx+1_ISR register.",
        "bit_offset": 28,
        "bit_size": 1
      }
    ]
  },
  "enum/DAMDF": {
    "bit_size": 2,
    "variants": [
      {
        "name": "NoPack",
        "description": "Without data packing, CDR/CDR2 not used",
        "value": 0
      },
      {
        "name": "Format32to10",
        "description": "CDR formatted for 32-bit down to 10-bit resolution",
        "value": 2
      },
      {
        "name": "Format8",
        "description": "CDR formatted for 8-bit resolution",
        "value": 3
      }
    ]
  },
  "enum/DUAL": {
    "bit_size": 5,
    "variants": [
      {
        "name": "Independent",
        "description": "Independent mode",
        "value": 0
      },
      {
        "name": "DualRJ",
        "description": "Dual, combined regular simultaneous + injected simultaneous mode",
        "value": 1
      },
      {
        "name": "DualRA",
        "description": "Dual, combined regular simultaneous + alternate trigger mode",
        "value": 2
      },
      {
        "name": "DualIJ",
        "description": "Dual, combined interleaved mode + injected simultaneous mode",
        "value": 3
      },
      {
        "name": "DualJ",
        "description": "Dual, injected simultaneous mode only",
        "value": 5
      },
      {
        "name": "DualR",
        "description": "Dual, regular simultaneous mode only",
        "value": 6
      },
      {
        "name": "DualI",
        "description": "Dual, interleaved mode only",
        "value": 7
      },
      {
        "name": "DualA",
        "description": "Dual, alternate trigger mode only",
        "value": 9
      }
    ]
  },
  "enum/PRESC": {
    "bit_size": 4,
    "variants": [
      {
        "name": "Div1",
        "description": "adc_ker_ck_input not divided",
        "value": 0
      },
      {
        "name": "Div2",
        "description": "adc_ker_ck_input divided by 2",
        "value": 1
      },
      {
        "name": "Div4",
        "description": "adc_ker_ck_input divided by 4",
        "value": 2
      },
      {
        "name": "Div6",
        "description": "adc_ker_ck_input divided by 6",
        "value": 3
      },
      {
        "name": "Div8",
        "description": "adc_ker_ck_input divided by 8",
        "value": 4
      },
      {
        "name": "Div10",
        "description": "adc_ker_ck_input divided by 10",
        "value": 5
      },
      {
        "name": "Div12",
        "description": "adc_ker_ck_input divided by 12",
        "value": 6
      },
      {
        "name": "Div16",
        "description": "adc_ker_ck_input divided by 16",
        "value": 7
      },
      {
        "name": "Div32",
        "description": "adc_ker_ck_input divided by 32",
        "value": 8
      },
      {
        "name": "Div64",
        "description": "adc_ker_ck_input divided by 64",
        "value": 9
      },
      {
        "name": "Div128",
        "description": "adc_ker_ck_input divided by 128",
        "value": 10
      },
      {
        "name": "Div256",
        "description": "adc_ker_ck_input divided by 256",
        "value": 11
      }
    ]
  }
}