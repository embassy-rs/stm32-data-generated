
use crate::metadata::ir::*;
pub(crate) static REGISTERS: IR = IR {
    blocks: &[Block {
        name: "Dbgmcu",
        extends: None,
        description: Some("Debug support"),
        items: &[
            BlockItem {
                name: "idcode",
                description: Some("MCU Device ID Code Register"),
                array: None,
                byte_offset: 0x0,
                inner: BlockItemInner::Register(Register {
                    access: Access::Read,
                    bit_size: 32,
                    fieldset: Some("Idcode"),
                }),
            },
            BlockItem {
                name: "cr",
                description: Some("Debug MCU Configuration Register"),
                array: None,
                byte_offset: 0x4,
                inner: BlockItemInner::Register(Register {
                    access: Access::ReadWrite,
                    bit_size: 32,
                    fieldset: Some("Cr"),
                }),
            },
            BlockItem {
                name: "apb1fzr1",
                description: Some("APB1 Low Freeze Register CPU1"),
                array: None,
                byte_offset: 0x3c,
                inner: BlockItemInner::Register(Register {
                    access: Access::ReadWrite,
                    bit_size: 32,
                    fieldset: Some("Apb1fzr1"),
                }),
            },
            BlockItem {
                name: "c2ap_b1fzr1",
                description: Some("APB1 Low Freeze Register CPU2"),
                array: None,
                byte_offset: 0x40,
                inner: BlockItemInner::Register(Register {
                    access: Access::ReadWrite,
                    bit_size: 32,
                    fieldset: Some("C2apB1fzr1"),
                }),
            },
            BlockItem {
                name: "apb1fzr2",
                description: Some("APB1 High Freeze Register CPU1"),
                array: None,
                byte_offset: 0x44,
                inner: BlockItemInner::Register(Register {
                    access: Access::ReadWrite,
                    bit_size: 32,
                    fieldset: Some("Apb1fzr2"),
                }),
            },
            BlockItem {
                name: "c2apb1fzr2",
                description: Some("APB1 High Freeze Register CPU2"),
                array: None,
                byte_offset: 0x48,
                inner: BlockItemInner::Register(Register {
                    access: Access::ReadWrite,
                    bit_size: 32,
                    fieldset: Some("C2apb1fzr2"),
                }),
            },
            BlockItem {
                name: "c2apb2fzr",
                description: Some("APB2 Freeze Register CPU2"),
                array: None,
                byte_offset: 0x48,
                inner: BlockItemInner::Register(Register {
                    access: Access::ReadWrite,
                    bit_size: 32,
                    fieldset: Some("C2apb2fzr"),
                }),
            },
            BlockItem {
                name: "apb2fzr",
                description: Some("APB2 Freeze Register CPU1"),
                array: None,
                byte_offset: 0x4c,
                inner: BlockItemInner::Register(Register {
                    access: Access::ReadWrite,
                    bit_size: 32,
                    fieldset: Some("Apb2fzr"),
                }),
            },
        ],
    }],
    fieldsets: &[
        FieldSet {
            name: "Apb1fzr1",
            extends: None,
            description: Some("APB1 Low Freeze Register CPU1"),
            bit_size: 32,
            fields: &[
                Field {
                    name: "tim2",
                    description: Some("Debug Timer 2 stopped when Core is halted"),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 0 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "rtc",
                    description: Some("RTC counter stopped when core is halted"),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 10 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "wwdg",
                    description: Some("WWDG counter stopped when core is halted"),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 11 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "iwdg",
                    description: Some("IWDG counter stopped when core is halted"),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 12 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "i2c1",
                    description: Some("Debug I2C1 SMBUS timeout stopped when Core is halted"),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 21 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "i2c3",
                    description: Some("Debug I2C3 SMBUS timeout stopped when core is halted"),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 23 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "lptim1",
                    description: Some("Debug LPTIM1 stopped when Core is halted"),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 31 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
            ],
        },
        FieldSet {
            name: "Apb1fzr2",
            extends: None,
            description: Some("APB1 High Freeze Register CPU1"),
            bit_size: 32,
            fields: &[Field {
                name: "lptim2",
                description: Some("LPTIM2 counter stopped when core is halted"),
                bit_offset: BitOffset::Regular(RegularBitOffset { offset: 5 }),
                bit_size: 1,
                array: None,
                enumm: None,
            }],
        },
        FieldSet {
            name: "Apb2fzr",
            extends: None,
            description: Some("APB2 Freeze Register CPU1"),
            bit_size: 32,
            fields: &[
                Field {
                    name: "tim1",
                    description: Some("TIM1 counter stopped when core is halted"),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 11 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "tim16",
                    description: Some("TIM16 counter stopped when core is halted"),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 17 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "tim17",
                    description: Some("TIM17 counter stopped when core is halted"),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 18 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
            ],
        },
        FieldSet {
            name: "C2apB1fzr1",
            extends: None,
            description: Some("APB1 Low Freeze Register CPU2"),
            bit_size: 32,
            fields: &[
                Field {
                    name: "lptim2",
                    description: Some("LPTIM2 counter stopped when core is halted"),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 0 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "rtc",
                    description: Some("RTC counter stopped when core is halted"),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 10 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "iwdg",
                    description: Some("IWDG stopped when core is halted"),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 12 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "i2c1",
                    description: Some("I2C1 SMBUS timeout stopped when core is halted"),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 21 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "i2c3",
                    description: Some("I2C3 SMBUS timeout stopped when core is halted"),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 23 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "lptim1",
                    description: Some("LPTIM1 counter stopped when core is halted"),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 31 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
            ],
        },
        FieldSet {
            name: "C2apb1fzr2",
            extends: None,
            description: Some("APB1 High Freeze Register CPU2"),
            bit_size: 32,
            fields: &[Field {
                name: "lptim2",
                description: Some("LPTIM2 counter stopped when core is halted"),
                bit_offset: BitOffset::Regular(RegularBitOffset { offset: 5 }),
                bit_size: 1,
                array: None,
                enumm: None,
            }],
        },
        FieldSet {
            name: "C2apb2fzr",
            extends: None,
            description: Some("APB2 Freeze Register CPU2"),
            bit_size: 32,
            fields: &[
                Field {
                    name: "tim1",
                    description: Some("TIM1 counter stopped when core is halted"),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 11 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "tim16",
                    description: Some("TIM16 counter stopped when core is halted"),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 17 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "tim17",
                    description: Some("TIM17 counter stopped when core is halted"),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 18 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
            ],
        },
        FieldSet {
            name: "Cr",
            extends: None,
            description: Some("Debug MCU Configuration Register"),
            bit_size: 32,
            fields: &[
                Field {
                    name: "dbg_sleep",
                    description: Some("Debug Sleep Mode"),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 0 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "dbg_stop",
                    description: Some("Debug Stop Mode"),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 1 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "dbg_standby",
                    description: Some("Debug Standby Mode"),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 2 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "trace_ioen",
                    description: Some("Trace port and clock enable"),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 5 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "trgoen",
                    description: Some("External trigger output enable"),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 28 }),
                    bit_size: 1,
                    array: None,
                    enumm: None,
                },
            ],
        },
        FieldSet {
            name: "Idcode",
            extends: None,
            description: Some("MCU Device ID Code Register"),
            bit_size: 32,
            fields: &[
                Field {
                    name: "dev_id",
                    description: Some("Device Identifier"),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 0 }),
                    bit_size: 12,
                    array: None,
                    enumm: None,
                },
                Field {
                    name: "rev_id",
                    description: Some("Revision Identifier"),
                    bit_offset: BitOffset::Regular(RegularBitOffset { offset: 16 }),
                    bit_size: 16,
                    array: None,
                    enumm: None,
                },
            ],
        },
    ],
    enums: &[],
};
